
use externals

type string
{	
	char& data
	int size
	int capacity
	
	constructor ()
	{
		this.data := alloc(2)
		this.capacity = 2
		this.size = 0
	}
	
	constructor (string_literal& lit)
	{
		int s = lit.size
		this.capacity = s + 1
		this.data := alloc(this.capacity)
		this.size = s
		memcpy(this.data, lit._buf, s + 1)
	}
	
	constructor(string& str)
	{
		int s = str.size
		this.capacity = s + 1
		this.data := alloc(this.capacity)
		this.size = s
		memcpy(this.data, str.data, s + 1)
	}
	
	destructor ()
	{
		free(this.data)
	}
}



char& [](string& str, int i)
{
	return __off(str.data, i)
}

//ensures that the array has atleast space for _size
void reserve(string& str, int _capacity)
{
	++_capacity // ensure space for a \0
	if(_capacity > str.capacity)
	{
		char& dat := str.data
		
		str.capacity = _capacity * 1.5

		str.data := alloc(str.capacity * sizeof(char))
		
		if(str.size != 0) {memcpy(str.data, dat, str.size)}
		
		free(dat)
	}
}

// ensures enough space, may remove any current content
void reserve_new(string& str, int _capacity)
{
}

void =(string& str, string_literal& lit)
{
	int s = lit.size
	reserve(str, s)
	str.size = lit.size
	memcpy(str.data, lit._buf, s + 1)
}

void +=(string& lhs, string& rhs)
{
	int s = lhs.size + rhs.size
	reserve(lhs, s)
	memcpy(__off(lhs.data, lhs.size), rhs.data, rhs.size + 1)
	lhs.size = s
}

void =(string& lhs, string& rhs)
{
	int s = rhs.size
	lhs.size = 0 // prevent cpy in reserve
	reserve(lhs, s)
	lhs.size = s
	memcpy(lhs.data, rhs.data, s + 1)
}

string +(string& lhs, string& rhs)
{
	string str = "test_test"
//	str += rhs
	return str
}