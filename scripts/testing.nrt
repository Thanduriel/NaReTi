
use math
use random
use externals
use vector

//use this to get a breakpoint in the compiler
void breakpoint()
{
}

type iVec2
{
	int x
	int y
}

iVec2 g_test_vec

void test_globalInit()
{
	g_test_vec.x = 11
	g_test_vec.y = 9
}

iVec2 addiVec(int x0, int y0, int x1, int y1 )
{
	iVec2 res
	res.x = x0 + x1
	res.y = y0 + y1
	
	return res
}

iVec2 +(iVec2& slf, iVec2& oth)
{
	iVec2 res
	res.x = slf.x + oth.x
	res.y = slf.y + oth.y
	
	return res
}

void printVec3(Vec3& _vec)
{
	printF(_vec.x)
	printF(_vec.y)
	printF(_vec.z)
}

float [](Vec3& _vec, int _i)
{
	if(_i == 0){return _vec.x}
	else if(_i == 1){return _vec.y}
	else if(_i == 2){return _vec.z}
}
float pi = 3.14159265
int test_global()
{	
	Vec3 loc
	loc.x = 4.0
	loc.y = 2.0
	loc.z = 1.0

	if(3.0 > 4.0){printStr("3.0 > 4.0")}
	if(3.0 < 4.0){printStr("3.0 < 4.0")}
	if(4.0 > 3.0){printStr("4.0 > 3.0")}
	if(4.0 < 3.0){printStr("4.0 < 3.0")}
	
	printVec3(loc)
//	float f = loc[0]
	printF(loc[0])
	printF(loc[1])
	printF(loc[2])
	
	printF(loc * loc)
	Vec3 loc2 = loc
	loc2.y = 7.0
	printF(len(loc))
	loc = loc + 2.0 * loc
	printF(len(loc))
	
	int trueVal = false
	printI(trueVal)
	
	printF(pi)
	
//	int[5] arrrrray
	int i = 0
	while(i < 5)
	{
		(++i)
//		arrrrray[i] = i
//		printI(arrrrray[i])
	}
	
	i = -i
	printI(i)
	printI(++i)
//	printI(-arrrrray[3])
	
	return g_test_vec.y
}

int test_performance()
{
	int tickCount = getTickCount()

	int i = 0
	Vec2 test
	test.x = 2.0
	test.y = 1.0
	//vector calculation
	while(i < 1000000)
	{
		++i
		test = test * 1.00001
	}
	i = 0
	float f = 0.0
	
	//math functions
	while(i < 326000)
	{
		++i
	//	f = cosp(f)
	}
	
	return getTickCount() - tickCount
}

Vec2& g_vecRef := 0a00000001

void main()
{
//	initRandom(getTickCount())
//	printF(rand(15, 0))
	
/*	Vec2 v1 = Vec2(124.0, 987.0)
	Vec2& v2
	printF(v2.x)
	v2 := v1
	printF(v2.x)*/
	
	Vec2[0] array
	init(array)
	Vec2 vec1 = Vec2(124.0, 987.0)
	Vec2 vec2 = Vec2(55.0, 22.0)
	
	push_back(array, vec1)
	push_back(array, vec2)
	push_back(array, vec1)
	
//	array[0] = vec2
	
	printF(array[0].x)
	printF(array[0].y)
	printF(array[1].x)
	printF(array[1].y)
	printF(array[2].x)
	printF(array[2].y)
//	vector.data = 1234
//	printI(vector.data)
	
//	printF(2.0'13.2)
	
	int i = 4
	i = 4 * 1.5
	i = i * 1.5
	//printI(i)
	
//	printI(i)
	
	float f = 3 - 1
	printF(f)
	f = -f
//	printF(f)
//	printI(i)
}