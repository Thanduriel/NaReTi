/* implemented as intrinsic
void* [](void*[] array, int ind)
{
}*/
/* array layout
type array
{
	void* data;
	int capacity;
	int size;
}*/


//ensures that the array has atleast space for _size
void expand(void &[0] _arr, int _size)
{
	if(_size > _arr.capacity)
	{	
		void &[0] temp //make another array to allow access per []
		temp.data = _arr.data
		
		_arr.capacity = 4 * _arr.capacity * 2 //growth factor, change to 1.5 when float -> int cast is enabled
		_arr.data = alloc(_arr.capacity)
		
		int i = -1
		while(++i < _arr.size) { _arr[i] = temp[i] }
		
		free(temp.data)
	}
	_arr.size = _size
}

//append copys of all elements of _oth to _slf
void &[0] +=(void &[0] _slf, void &[0] _oth)
{
	int n = _slf.size
	expand(_slf.size + _oth.size)
	
	int i = -1
	while(++i < _oth.size)
	{
		_slf[i + n] = _oth[i]
	}
	
} 