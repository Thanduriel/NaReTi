
use math
use random
use externals
use vector

int sum(int arg0, int arg1)
{
	return arg0 + arg1
}

float fsum(float f0, float f1)
{
	return f0 + f1
}

float castTest(int arg0, float arg1)
{
	return arg0 + arg1
}

type iVec2
{
	int x
	int y
}

float memberAccess(Vec2& _vec)
{
	return _vec.y
}

void test_memberAssign(iVec2& _vec)
{
	_vec.x = 42
}

int precedence(int a, int b)
{
	return 3 + a * (b + 3) * a + b
}

int test_localVar(int a, int b)
{
	int x
	x = a + b
	
	return x
}

int test_branch(int a)
{
	if(a == 10)
	{
		return 10
	}
	else if(a == 11)
	{
		return 11
	}
	else { return 2}
}

int test_boolean(int a, int b)
{
	if((a == 0 && b == 1) || b == 0 || a == b){return 1}
	
	return 0
}

int test_loop(int a, int b)
{
	while(0 < a && b < 57)
	{
		b = b + a
	}
	return b
}

iVec2 g_test_vec

void test_globalInit()
{
	g_test_vec.x = 11
	g_test_vec.y = 9
}

iVec2 addiVec(int x0, int y0, int x1, int y1 )
{
	iVec2 res
	res.x = x0 + x1
	res.y = y0 + y1
	
	return res
}

iVec2 +(iVec2& slf, iVec2& oth)
{
	iVec2 res
	res.x = slf.x + oth.x
	res.y = slf.y + oth.y
	
	return res
}

void printVec3(Vec3& _vec)
{
	printF(_vec.x)
	printF(_vec.y)
	printF(_vec.z)
}

float [](Vec3& _vec, int _i)
{
	if(_i == 0){return _vec.x}
	else if(_i == 1){return _vec.y}
	else if(_i == 2){return _vec.z}
}

int test_global()
{
	iVec2 stackVec = addiVec(2, 3, 8, 9)
	
	printI(stackVec.x)
	printI(stackVec.y)
	stackVec = g_test_vec
	printI(stackVec.x)
	printI(stackVec.y)

	stackVec = stackVec + g_test_vec
	printI(stackVec.x)
	printI(stackVec.y)
	
	printStr("hello world!")
	printF(sin(1.57))
	printI(pow(2, 8))
	printF(sqrt(765.34))
	
	Vec3 loc
	loc.x = 4.0
	loc.y = 2.0
	loc.z = 1.0

//	if(loc.x <= loc.x){printI(11111111)}
//	if(loc.x <= loc.y){printI(22222222)}
	if(3.0 > 4.0){printStr("3.0 > 4.0")}
	if(3.0 < 4.0){printStr("3.0 < 4.0")}
	if(4.0 > 3.0){printStr("4.0 > 3.0")}
	if(4.0 < 3.0){printStr("4.0 < 3.0")}
	
	printVec3(loc)
//	float f = loc[0]
	printF(loc[0])
	printF(loc[1])
	printF(loc[2])
	
	printF(loc * loc)
	Vec3 loc2 = loc
	loc2.y = 7.0
	printF(len(loc))
	loc = loc + 2.0 * loc
	printF(len(loc))
	
//	printF(pi)
	return g_test_vec.y
}
